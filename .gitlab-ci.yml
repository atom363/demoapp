variables:
  PROD_CONTAINER_NAME: demoapp
  PROD_CONTAINER_IMAGE: "atom363/demoapp:python-web-app-1.0"
  TF_VAR_VMNAME: diploma
  TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/tf_state

#Test1
stages:
  - test
  - build
  - deploy_infra
  - deploy_app

test_app:
  stage: test
  image: python:3.9-slim-buster
  before_script:
    - apt-get update && apt-get install make
  script:
    - cd ./app/
    - make test

build_image:
  stage: build
  image: docker:20.10.22
  services:
    - docker:20.10.22-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PASS
  script:
    - docker build -t $PROD_CONTAINER_IMAGE ./app/
    - docker push $PROD_CONTAINER_IMAGE

deploy_infrastructure:
  stage: deploy_infra
  image: 
    name: hashicorp/terraform:1.3.7
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  script:
    - cd ./infrastructure/tf/
    - terraform init -input=false
    - terraform plan
    - terraform apply -auto-approve
  rules:
    - if: $CI_COMMIT_BRANCH == "master"

deploy_application:
  stage: deploy_app
  image: atom363/ubuntu-ansible:1.0
  before_script:
    - chmod 400 $SSH_KEY_AWS
    - export ANSIBLE_HOST_KEY_CHECKING=False
  script:
    - ansible-playbook ./infrastructure/ansible/app_role/playbook.yml -i ./infrastructure/ansible/app_role/aws_ec2.yml --key-file $SSH_KEY_AWS
  rules:
    - if: $CI_COMMIT_BRANCH == "master"

